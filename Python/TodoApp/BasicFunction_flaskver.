from flask import Flask, render_template, request, redirect, url_for, jsonify, abort
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
import sys

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://postgres:xyz@localhost:5432/todoapp'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

migrate = Migrate(app, db)


class Todo(db.Model):
    __tablename__ = "todos"
    id = db.Column(db.Integer, primary_key=True)
    description = db.Column(db.String(), nullable=False)
    complete = db.Column(db.Boolean, nullable=False, default=False)
    list_id = db.Column(db.Integer, db.ForeignKey(
        'todolists.id'), nullable=False)

    def __repr__(self):
        return f'<Todo ID: {self.id}, description: {self.description}, complete: {self.complete}>'


class TodoList(db.Model):
    __tablename__ = "todolists"
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(), nullable=False)
    todos = db.relationship('Todo', backref='list', lazy=True)

    def __repr__(self):
        return f'<TodoList ID: {self.id}, name: {self.name}, todos: {self.todos}>'


@app.route('/todos/create', methods=['POST'])
def create_todo():
    error = False
    body = {}
    try:
        description = request.get_json()['description']
        list_id = request.get_json()['list_id']
        todo = Todo(description=description, complete=False, list_id=list_id)
        db.session.add(todo)
        db.session.commit()
        body['id'] = todo.id
        body['complete'] = todo.complete
        body['description'] = todo.description
    except():
        db.session.rollback()
        error = True
        print(sys.exc_info())
    finally:
        db.session.close()
    if error:
        abort(500)
    else:
        return jsonify(body)

@app.route('/todos/<todo_id>/set-complete', methods=['POST'])
def update_todo(todo_id):
    error = False
    try:
        complete = request.get_json()['complete']
        todo = Todo.query.get(todo_id)
        print('Todo: ', todo)
        todo.complete = complete
        db.session.commit()
    except():
        db.session.rollback()
        error = True
        print(sys.exc_info())
    finally:
        db.session.close()
    if error:
        abort(500)
    else:
        return redirect(url_for('index'))

@app.route('/todos/<todo_id>/delete', methods=['DELETE'])
def delete_todo(todo_id):
    error = False
    try:
        #Todo.query.filter_by(id=todo_id).delete()
        todo = Todo.query.get(todo_id)
        db.session.delete(todo)
        db.session.commit()
    except():
        db.session.rollback()
        error = True
    finally:
        db.session.close()
    if error:
        abort(500)
    else:
        return jsonify({'success': True})

@app.route('/todos/<todo_id>/set-completed', methods=['POST'])
def set_completed_todo(todo_id):
    error = False

    try:
        completed = request.get_json()['completed']

        todo = Todo.query.get(todo_id)
        todo.completed = completed

        db.session.commit()
    except:
        db.session.rollback()

        error = True
    finally:
        db.session.close()

    if error:
        abort(500)
    else:
        return '', 200

@app.route('/')
def index():
    return redirect(url_for('get_list_todos', list_id=1))

@app.route('/lists/<list_id>')
def get_list_todos(list_id):
    lists = TodoList.query.all()
    active_list = TodoList.query.get(list_id)
    todos = Todo.query.filter_by(list_id=list_id).order_by('id').all()

    return render_template('index.html', todos=todos, lists=lists, active_list=active_list)

@app.route('/lists/create', methods=['POST'])
def create_list():
    error = False
    body = {}
    try:
        name = request.get_json()['name']
        todolist = TodoList(name=name)
        db.session.add(todolist)
        db.session.commit()
        body['id'] = todolist.id
        body['name'] = todolist.name
    except():
        db.session.rollback()
        error = True
        print(sys.exc_info)
    finally:
        db.session.close()
    if error:
        abort(500)
    else:
        return jsonify(body)

@app.route('/lists/<list_id>/delete', methods=['DELETE'])
def delete_list(list_id):
    error = False
    try:
        list = TodoList.query.get(list_id)
        for todo in list.todos:
            db.session.delete(todo)
        
        db.session.delete(list)
        db.session.commit()
    except():
        db.session.rollback()
        error = True
    finally:
        db.session.close()
    if error:
        abort(500)
    else:
        return jsonify({'success': True})

        
@app.route('/lists/<list_id>/set-completed', methods=['POST'])
def set_completed_list(list_id):
    error = False

    try:
        list = TodoList.query.get(list_id)

        for todo in list.todos:
            todo.completed = True

        db.session.commit()
    except:
        db.session.rollback()

        error = True
    finally:
        db.session.close()

    if error:
        abort(500)
    else:
        return '', 200


if __name__ == '__main__':
    app.run(debug=True)
    
    
    
------------------------------------------


<!DOCTYPE html>
<html lang="en">
  <head>
    <meta http-equiv="refresh" content="60">
    <title>Todo App</title>
    <style>
      .hidden {
        display: none;
      }
      ul {
        list-style: none;
        padding-left: 0;
        width: 200px;
      }
      li {
        clear: both;
      }
      li button {
        -webkit-appearance: none;
        border: none;
        outline: none;
        color: red;
        float: right;
        cursor: pointer;
        font-size: 16px;
      }
      .lists-wrapper, .todos-wrapper {
        display: inline-block;
        vertical-align: top;
      }
    </style>
  </head>
  <body>
    <h3>A SAMPLE VERSION OF TODO APP</h3>
    <div class="lists-wrapper">
        <h4>TODO LISTS</h4>
        <form action="/lists/create" method="POST" id="list-form">
          <label for="todolist">Create List:</label>
          <input type="text" name="todolist" id="todolist-input" placeholder="A new List" data-id="{{ active_list.id }}"/>
          <button type="submit">Create List</button>
        </form>        
      <ul id="lists">
        {% for list in lists %}
        <li>
          <input type="checkbox" data-id="{{ list.id }}" class="list-check-completed">
          <a href="/lists/{{ list.id }}">{{ list.name }}</a>
          <button class="delete-list" data-id="{{ list.id }}">&cross;</button>
        </li>
    {% endfor %}
      </ul>
    </div>

    <div class="todos-wrapper">      
      <h4>TODO ITEMS</h4>
      <form action="/todos/create" method="POST" id="todo-form">
        <input id="list_id" type="hidden" value="{{ active_list.id }}">
        <label for="description">Create Task:</label>
        <input id="description" type="text" name="description" placeholder="Task description"  />
        <button type="submit">Create Task</button>
      </form>
      <div id="error" class="hidden">
        An error occurred, please try again.
      </div>   
        <h4>{{ active_list.name }}</h4>
        <ul id="todos">
          {% for todo in todos %}
          <li>
            <input data-id="{{ todo.id }}" class="todo-check-completed" type="checkbox" name="complete" id="complete" {% if todo.completed %} checked {%endif%} />
            {{ todo.description }}
            <button class="delete-todo" data-id="{{ todo.id }}">&cross;</button>
          </li>
          {% endfor %}
        </ul>
            
    </div>

    <script>
      let deleteBtns;
      const listCheckboxes = document.querySelectorAll('.list-check-completed');
      for (let i = 0; i < listCheckboxes.length; i++) {
          const checkbox = listCheckboxes[i];

          checkbox.onchange = function (e) {
              if (e.target.checked) {
                  const listId = e.target.dataset.id;

                  fetch('/lists/' + listId + '/set-completed', {
                      method: 'POST',
                      headers: {
                          'Content-Type': 'application/json'
                      }
                  })
                  .then(function (jsonResponse) {
                      document.getElementById('error').className = 'hidden';

                      const todoCheckboxes = document.querySelectorAll('.todo-check-completed');

                      for (let i = 0; i < todoCheckboxes.length; i++) {
                          const checkbox = todoCheckboxes[i];

                          checkbox.checked = true;
                      }
                  })
                  .catch(function () {
                      document.getElementById('error').className = '';
                  })
              }
          }
      }




      const todoCheckboxes = document.querySelectorAll('.todo-check-completed');
      for (let i = 0; i < todoCheckboxes.length; i++) {
          const checkbox = todoCheckboxes[i];

          checkbox.onchange = function (e) {
              const newCompleted = e.target.checked;
              const todoId = e.target.dataset.id;

              fetch('/todos/' + todoId + '/set-completed', {
                  method: 'POST',
                  body: JSON.stringify({
                      'completed': newCompleted
                  }),
                  headers: {
                      'Content-Type': 'application/json'
                  }
              })
              .then(function (jsonResponse) {
                  document.getElementById('error').className = 'hidden';
              })
              .catch(function () {
                  document.getElementById('error').className = '';
              })
          }
      }

      deleteBtns = document.querySelectorAll(".delete-todo");
      
      for (let i = 0; i < deleteBtns.length; i++) {
        const deleteBtn = deleteBtns[i];
        deleteBtn.onclick = function(e) {
          console.log("Delete event: ", e);
          const todoId = e.target.dataset.id;
          fetch('/todos/'+ todoId + '/delete',{
            method: 'DELETE'
          }).then(function() {
            console.log('Parent?', e.target);
            const item = e.target.parentElement;
            item.remove();
              document.getElementById("error").className = "hidden";
            })
            .catch(function(e) {
              console.error(e);
              document.getElementById("error").className = "";
            });
        };
      }

      deleteListBtns = document.querySelectorAll(".delete-list");
      
      for (let i = 0; i < deleteListBtns.length; i++) {
        const deleteBtn = deleteListBtns[i];
        deleteBtn.onclick = function(e) {
          console.log("Delete event: ", e);
          const listId = e.target.dataset.id;

          fetch('/lists/'+ listId + '/delete',{
            method: 'DELETE'
          }).then(function() {
            console.log('Parent?', e.target);
            const item = e.target.parentElement;
            item.remove();
              document.getElementById("error").className = "hidden";
              window.location.reload(true);
            })
            .catch(function(e) {
              console.error(e);
              document.getElementById("error").className = "";
            });
        };
      }

      
      document.getElementById('todo-form').onsubmit = function (e) {
        e.preventDefault();

        fetch('/todos/create', {
            method: 'POST',
            body: JSON.stringify({
                'description': document.getElementById('description').value,
                'list_id': document.getElementById('list_id').value
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(function (response) {
            return response.json();
        })
        .then(function (jsonResponse) {
            const liItem = document.createElement('LI');

            liItem.innerHTML = jsonResponse['description'];
            document.getElementById('todos').appendChild(liItem);
            document.getElementById('error').className = 'hidden';
            window.location.reload(true);
        })
        .catch(function () {
            document.getElementById('error').className = '';
        })
      }

      document.getElementById('list-form').onsubmit = function (e) {
        e.preventDefault();

        fetch('/lists/create', {
            method: 'POST',
            body: JSON.stringify({
                'name': document.getElementById('todolist-input').value
            }),
            headers: {
                'Content-Type': 'application/json'
            }
        })
        .then(function (response) {
            return response.json();
        })
        .then(function (jsonResponse) {
            const liItem = document.createElement('LI');

            liItem.innerHTML = jsonResponse['name'];
            document.getElementById('lists').appendChild(liItem);
            document.getElementById('error').className = 'hidden';
            window.location.reload(true);
        })
        .catch(function (err) {
            document.getElementById('error').className = '';
        })
      }


    </script>
  </body>
</html>

