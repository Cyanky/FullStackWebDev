from __future__ import absolute_import
from flask import Flask, render_template, request, redirect, url_for, jsonify, abort
from flask_sqlalchemy import SQLAlchemy
from flask import request
from flask_migrate import Migrate
import sys



app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgresql://xjc:111070@localhost:5432/todoapp'
db = SQLAlchemy(app)
migrate = Migrate(app, db)

class Todo(db.Model):
    __tablename__ = 'todos'
    id = db.Column(db.Integer, primary_key=True)
    description = db.Column(db.String(), nullable=False)
    completed = db.Column(db.Boolean, default=False)
    list_id = db.Column(db.Integer, db.ForeignKey('todolists.id'), nullable=False)

    def __repr__(self):
        return f'<Todo {self.id} {self.description}>'

class Todolist(db.Model):
    __tablename__ = 'todolists'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(), nullable=False)
    todos = db.relationship('Todo', backref='list', lazy=True)

    def __repr__(self):
        return f'<TodoList {self.id} {self.name}>'

@app.route('/todos/create', methods=['POST'])
def create_todo():
    error = False
    body = {}
    try:
        description = request.get_json()['description']
        todo = Todo(description=description)
        body['description'] = todo.description
        db.session.add(todo)
        db.session.commit() 
    except:
        error = True
        db.session.rollback()
        print(sys.exc_info())
    finally:
        db.session.close()
        if error == True:
            abort(400)
        else:
            return jsonify(body)

@app.route('/todos/<todo_id>/set-completed', methods=['POST'])
def set_completed_todo(todo_id):
    try:
        completed = request.get_json()['completed']
        print('completed', completed)
        todo = Todo.query.get(todo_id)
        todo.completed = completed
        db.session.commit()
    except:
        db.session.rollback()
    finally:
        db.session.close()
    return redirect(url_for('index'))

@app.route('/todos/<todo_id>', methods=['DELETE'])
def delete_todo(todo_id):
  try:
    Todo.query.filter_by(id=todo_id).delete()
    db.session.commit()
  except:
    db.session.rollback()
  finally:
    db.session.close()
  return jsonify({ 'success': True })

@app.route('/lists/<list_id>')
def get_list_todos(list_id):
    return render_template('index.html', 
    data=Todo.query.filter_by(list_id=list_id).order_by('id').all())

@app.route('/')
def index():
    return redirect(url_for('get_list_todos', list_id=1))

if __name__ == '__main__':
    app.debug = True
    app.run(host='0.0.0.0', port=3000)
    
    
    
------------------------------------------


<html>
    <head>
        <title>Todo App</title>
        <style>
        .hidden {
            display: none;
        }
        ul {
            list-style: none;
            padding: 0;
            margin: 0;
            width: 300px;
        }
        li {
            clear: both;
        }
        li button {
            -webkit-appearance: none;
            border: none;
            outline: none;
            color: red;
            float: right;
            cursor: pointer;
            font-size: 20px;
        }
        .lists-wrapper, .todos-wrapper {
        display: inline-block;
        vertical-align: top;
        }
        </style>
    </head>
    <body>
        <div class="lists-wrapper">
            <ul id="lists">
                {% for list in lists %}
                <li>
                <a href="/lists/{{ list.id }}">
                    {{ list.name }}
                </a>
                </li>
                {% endfor %}
            </ul>
        </div>
        <div class="todos-wrapper">
            <h4>{{ active_list.name }}</h4>
            <form id="form">
                <input type="text" id="description" />
                <input type="submit" value="Create" />
            </form>
            <div id="error" class="hidden" > Something went wrong! </div>
            <ul id="todos">
            {% for d in data %}
            <li>
                <input class="check-completed" data-id="{{ d.id }}"
                type="checkbox" {% if d.completed %} checked {% 
                endif %}/> 
                {{ d.description }}
                <button class="delete-button" data-id="{{ d.id }}">
                &cross;
                </button> 
            </li>
            {% endfor %}
            </ul>
        </div>
        <script>

            document.getElementById('form').onsubmit = function(e) {
                e.preventDefault();
                fetch('/todos/create', {
                    method: 'POST',
                    body: JSON.stringify({
                        'description': document.getElementById('description').value
                    }),
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(function(response) {
                    return response.json();
                }) 
                .then(function(jsonResponse) {
                    console.log(jsonResponse);
                    const li = document.createElement('li');

                    const checkbox = document.createElement('input');
                    checkbox.className = 'check-completed';
                    checkbox.type = 'checkbox';
                    checkbox.setAttribute('data-id', jsonResponse.id);
                    li.appendChild(checkbox);

                    const text = document.createTextNode(' ' + jsonResponse.description);
                    li.appendChild(text);

                    const deleteBtns = document.createElement('button');
                    deleteBtns.className = 'delete-button';
                    deleteBtns.setAttribute('data-id', jsonResponse.id);
                    deleteBtns.innerHTML = '&cross;';
                    li.appendChild(deleteBtns);
                
                    document.getElementById('todos').appendChild(li);
                    document.getElementById('error').className = 'hidden';
                })
                .catch(function() {
                    document.getElementById('error').className = '';
                })
            }
            const checkboxes = document.querySelectorAll('.check-completed');
            for (let i = 0; i < checkboxes.length; i++) {
                const checkbox = checkboxes[i];
                checkbox.onchange = function(e) {
                    const newCompleted = e.target.checked;
                    const todoId = e.target.dataset['id'];
                    fetch('/todos/' + todoId + 'set-completed', {
                        method: 'POST',
                        body: JSON.stringify({
                            'completed': newCompleted
                        }),
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                    .then(function() {
                        document.getElementById('error').className = 'hidden';
                    })
                    .catch(function() {
                        document.getElementById('error').className = '';
                    });
                }
            }
            const deleteBtns = document.querySelectorAll('.delete-button');
            for (let i = 0; i < deleteBtns.length; i++) {
                const btn = deleteBtns[i];
                btn.onclick = function(e) {
                    const todoId = e.target.dataset['id'];
                    fetch('/todos/' + todoId, {
                        method: 'DELETE'
                    })
                    .then(function() {
                        const item = e.target.parentElement;
                        item.remove();
                    })
                }
            }
        </script>
    </body>
</html>
