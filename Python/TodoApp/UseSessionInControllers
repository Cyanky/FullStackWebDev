--------------------------todoapp/templates/index.html

<html>
  <head>
    <title>Todo App</title>
      <style>
      .hidden {
           display: none;
    }
</style>
  </head>
  <body>
    <form id='form'>
      <input type="text" id='description' />
      <input type="submit" value="Create" />
    </form>
    <ul id='todos'>
      {% for d in data %}
      <li>{{ d.description }}</li>
      {% endfor %}
    </ul>

      <div class = "hidden" id = "error" > Something went wrong! </div>

<script>

    const descInput = document.getElementById('description');
    document.getElementById('form').onsubmit = function (e) {
    e.preventDefault();
    const desc = descInput.value;

    fetch('/todos/create', {
          method: 'POST',
          body: JSON.stringify({'description': desc}),
          headers: {
            'Content-Type': 'application/json',
          }
        })
    .then(function(response) {

         return response.json();
    })
    .then(function(jsonResponse) {

         const liItem= document.createElement('LI');
         liItem.innerHTML = jsonResponse['description'];
         document.getElementById('todos').appendChild(liItem);
         document.getElementById('error').classname='hidden';
    })
    .catch(function() {

         document.getElementById('error').className='';
          })

           }  


</script>


  </body>
</html>

---------------------------todoapp/app.py

from flask import Flask, render_template, request, redirect, url_for, jsonify, abort

// abort:
//The route handler should always return something or raise an intentional exception, in the case of an error. To fix this with a simple solution, we can simply import abort from Flask:
//'from flask import abort'
//and we can call abort(<status code>), e.g. with status code 500, abort(500) to rise an HTTPException for an Internal Server Error, in order to abort a request and prevent it from expecting a returned result. Since this is a course on web data modeling, we won't be going into errors in depth, but you can check out resources below.

from flask_sqlalchemy import SQLAlchemy
from flask import request
import sys

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgres://postgres:abc@localhost:5432/todoapp'
db = SQLAlchemy(app)

class Todo(db.Model):
  __tablename__ = 'todos'
  id = db.Column(db.Integer, primary_key=True)
  description = db.Column(db.String(), nullable=False)

  def __repr__(self):
    return f'<Todo {self.id} {self.description}>'

db.create_all()


@app.route('/todos/create', methods=['POST'])
def create_todo():   
   body={}
   error = False
   try: 
       description =  request.get_json()['description']
       todo = Todo(description=description)
       body['description'] = todo.description
       db.session.add(todo)
       db.session.commit()
   except:        
        error = True
        db.session.rollback()
        print(sys.exc_info()) // to show error 
   finally:
        db.session.close()           
        if  error == True:
            abort(400)
        else:            
            return jsonify(body) // use body to let the code be excuted after teh session be closed

@app.route('/')
def index():
    return render_template('index.html', data=Todo.query.all())




#always include this at the bottom of your code
if __name__ == '__main__':
   app.run(host="0.0.0.0", port=3000)
